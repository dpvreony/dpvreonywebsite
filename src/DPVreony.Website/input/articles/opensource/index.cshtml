@using DPVreony.Website.Features.Articles
@using NodaTime
@{
    var articleMetadata = new ArticleMetadataModel(
        ArticleStatus.Draft,
        new Version(0, 2),
        new LocalDate(2021, 01, 22),
        new LocalDate(2021, 03, 27),
        new LocalDate(2021, 03, 27),
        new LocalDate(2021, 06, 27));
}
<div class="row">
    <div class="col-md-8">
        <h1>Getting involved as an Open Source maintainer</h1>

        <h2>New Project or Contribute elsewhere?</h2>

        <p>It's worth looking around to see if what you're trying to solve would be a fit for another project. Alternatively it could a be niche or new subject which may require you to found a project. Below are some thinking points to help make an informed decision on what works for you.</p>

        <h3>What's your motivation?</h3>

        <div class="alert alert-info">
            <strong>TAKE NOTE:</strong> If your motivation is money be aware it's very difficult to make a living from open source software.
            If you're lucky you may get a job where you're paid to do open source software, or you may occasionally be offered money to support changes \ usages of your project.
            It's also possible your open source may land you a job.
        </div>

        <h3>What are your limitations?</h3>

        <p>Everyone has limitations. Time is finite and people have different strengths and weaknesses. Be honest with yourself and others. Look after your physical and mental health and avoid burnout.</p>

        <h2>Managing your process and project via a maturity model</h2>

        <p>Your aim should be to have a project that is sustainable. The documentation below will detail a lot of things to consider and the more you can structure and automate the more you help yourself and other contributors not get bogged down in manual housekeeping. However taking the time to put processes in place also requires time and there are tradeoffs in up front time and the long term returns. The key is to understand the different considerations and keep a note of the decisions you make on them. This will help drive your understanding and plan your way through a sustainability and maturity model as you progress through the life of the project.</p>

        <h2>Source Code Storage</h2>
        Personal Repo vs Organisation
        Open Source Repository Management
        Readme
        * Give credit to others
        <h2>Conformance \ Branch Policies</h2>

        <p>TODO: Merge - Squash Commit</p>

        <h3>Automation</h3>
        <h4>Dependency Updates</h4>
        <p>Dependabot is now built into github and allows management of external dependency updates for popular packagement management platforms such as NPM and Nuget. It also allows managing updates of github actions.</p>

        <h3>Repository tags</h3>
        <p>Using tags on your repository is a good way to help get noticed in search results. Make use of key words such as a product, technology, platform or domain subject (for example FHIR for healthcare messaging or SourceGenerator for Roslyn Source Generators as these are niche areas). Avoid using generic terms such as API, JSON, MVC unless you're specifically solving a problem in that domain (for example you're implementing a middleware for the MVVM\ MVU pattern - though if you are implementing these patterns look around to see if you can assist in the others that exist ☺).</p>

        <h2>The Project README file</h2>
        <p>Your readme is the landing page in your repository when a browser hits it. You have 3 audiences that you need to consider.</p>
        <ul>
            <li>Those that want to use the project and just want to get started with consuming it.</li>
            <li>Those that want to build the code but don't have access to the repository.</li>
            <li>Those that want to build the code and have access to the repository.</li>
        </ul>
        <p>The distinction between having read and write on the repository is important in terms of getting started and a positive experience. If someone wants to make a change locally while they learn, they may want to be able to commit their changes therefore encouraging them to <strong>Fork</strong> the repository first gives them a better experience. For maintainers \ contributes you may want to direct them to have specific toolsets enabled or they may need signing certificates installed, it might be more nuanced information that is a step up from casual use of the repository.</p>

        <h2>License</h2>

        <p>
            A license is an absolute must. Businesses and developers will not use projects where the legal protections are unclear.
            <a href="https://choosealicense.com/">Choose a license</a> is a great resource for understanding your choices on licenses.
            It's also worth time to look and understand the views held for and against GPL and Microsoft originating licenses.
        </p>

        <h2>Code Of Conduct</h2>

        <p>TODO</p>

        <div class="alert alert-info">
            Be aware of the toxicity, allow yourself to disconnect from it. You can't please everyone.
            Very few people engage with projects. A number will feel self entitlement to tell you what to do. It's rare for people to positively engage with a project to say thank you and\or help it expand.
            Keep this in mind when you engage as well, be gracious and keep things civil and simple. Failing that ignore and block the offenders.
            Don't suffer in silence, use Twitter to engage with those more friendly in the community to say you're experiencing negative encounters. My twitter feed shows too many people experiencing intolerance and hate, organizations providing the platform have more to do, but you will get support from peers.
        </div>

        <h2>Contributing Guidelines</h2>

        <p>TODO</p>

        <h2>Security Disclosures</h2>

        <p>TODO</p>

        <h2>Support Policy \ Lifespan</h2>

        <h3>In your readme establish a support policy.</h3>
        <ul>
            <li>Will you offer support, or is the software "as is"?</li>
            <li>
                Will you offer paid support?
                Having an open source license and paid support are not mutually exclusive, despite what you may be told by some consumers of your project.
            </li>
            <li>Will you accept requests for help via Github Issues?</li>
            <li>Will you suggest using an alternative site\platform for support?</li>
            <li>If you have dependencies on other packages, platforms or operating systems what is your lifetime support policy?</li>
        </ul>

        <div class="alert alert-info">
            Things to consider here are operating systems have 5-10 year life cycles. Some people will expect you to continue supporting old operating systems or frameworks. One strategy to this is "we work with the latest long term support version and offer no gurantees on old versions" and leave it up to consumers to contribute to help ensure things don't break on older versions. However it can be unreasonable for someone to expect an old out of support framework to be maintained. They have the option to fork the repository if they so desire, be aware of the overhead of taking on a contribution if it's going to cause you excess overhead on the sustainability model of the project.
        </div>

        <h3>Dealing with Issues \ Tickets</h3>
        <ul>
            <li>Consider templates for the different types of tickets</li>
            <li>Enforcement of tickets not following the templates</li>
            <li>Auto lock old closed items.</li>
        </ul>

        <h2>Covering costs \ Monetization</h2>
        <h3>Sponsorship</h3>

        <p>Github run a sponsorship program and there are also options such as Open Collab. As previously mentioned the amount of money these tend to generate is not a lot to make a living off. It may cover costs.</p>

        <p>Be aware of sponsorship abuse if you list sponsors on your site and\or project. There are some organizations such as Casinos that place sponsorship as a form of advertisement and Page Rank boosting for links into their own domains.</p>

        <h3>Licensing for open source projects</h3>
        <p>Another possibility is the coverage of costs of licenses and\or hosting. There are suppliers of development tools and hosting that offer incentives to open source projects. These may be free in return for a logo or mention on your site.</p>

        <h3>Use free tools, packages, platforms</h3>
        <p>There are a wealth of tools out there that are free or have a free tier for open source, indie development or low level usage. You can now get a web site \ application hosted in a fashion that allows you to reduce costs on getting started.</p>

        <h2>Community</h2>

        <h3>Wiki or not to wiki?</h3>
        <p>TODO</p>

        <h3>Generating Traffic and Raising awareness</h3>

        <h3>Project succession</h3>
        <p>TODO</p>

        <h3>Own websites</h3>
        <p>TODO</p>

        <h3>Issues \ Bugs workflows on github</h3>
        <p>TODO</p>

        <h3>Discussions on github</h3>
        <p>TODO</p>

        <h3>External Management</h3>

        <h4>Stack overflow</h4>
        <p>Stack overflow is a community site that can self driving for knowledge can be a good way of having a community help each other and articles are archived by a search engine. Unlike IM platforms they don't require additional tools. When starting out it can be important to keep an eye, as your userbase grows you may find you gain a critical mass and others will keep the knowledge flowing.</p>
        <p>Stack overflow can be a toxic and intimidating environment with over zealous, opaque and unaccountable moderation combined with "newbie" intolerant contributors it can be an off-putting experience. Stack Overflow has introduced a code of contact but as of May 2020 it has no visible benefit. I would recommend using an integration with a messaging tool such as Slack to monitor keywords relating to your project. But I would NOT use it as the primary driver of support and knowledge.</p>
        <p>One of the uses to consider using Stack Overflow for is to track requests for the problem your product \ project is aiming to solve. Be careful not to have your answer look like advertisements but show how it solves the problem of the question being asked.</p>

        <h4>Communication tools such as Slack \ Gitter.im</h4>
        <p>Messaging tools can be a handy platform but take into consideration there is knowledge being captured that can be useful to others in the future and not readily available. Look for a way to extract them automatically, have people update the documentation, or encourage the use of sites like stack overflow.</p>

        <h3>Idea Management</h3>
        <p>TODO</p>
        <h4>Capture ideas</h4>
        <p>TODO</p>
        <h4>Architecture Design Reasoning</h4>
        <p>TODO</p>
        <h4>UML</h4>
        <p>TODO</p>
        <h4>Iterate</h4>
        <p>TODO</p>

        <h2>Tooling</h2>
        <p>TODO</p>


        <h2>Solution Structure</h2>
        <p>TODO</p>
        <ul>
            <li>Unit Tests</li>
            <li>Benchmarks</li>
            <li>Experimental</li>
            <li>Sharing configuration across .NET projects with directory.props and directory.targets</li>
            <li>
                Strong Name Signing
                * Don't do it (explain the headaches)
                * Give instructions to Claire Ovotony's self sign tool
            </li>
            <li>Authenticode Signing</li>
        </ul>

        <h2>Getting a developer started.</h2>

        <h3>Codespaces</h3>
        <h3>Gitpod</h3>
        <h3>Local development environment</h3>

        <h3>Automated Builds</h3>
        <p>TODO</p>
        <ul>
            <li></li>
            <li>Script Bootstrapping</li>
            <li>Cake</li>
            <li>Nuke</li>
            <li>Vanilla MSBuild</li>
            <li>Build Solution</li>
            <li>Package Restore logs</li>
            <li>Build logs</li>
            <li>Treat Warnings as Errors</li>
            <li>Unit Tests</li>
            <li>Code Coverage</li>
            <li>Integration Testing</li>
            <li>In memory test harness</li>
            <li>OWASP ZAP Scanning</li>
            <li>Breaking Change Scanning</li>
            <li>Documentation Generation</li>
            <li>OMD generation</li>
            <li>Enable xmldoc generation</li>
            <li>Use a separate branch or repo for documentation?</li>
            <li>Ship a nuget package</li>
            <li>make the recipient docfx repository depend on the package</li>
            <li>Use a dependency update tool</li>
            <li>run a package restore task</li>
            <li>run a pre build task to extract the nuget package contents</li>
            <li>DocFx</li>
            <li>configure docfx to scan the extracted nuget packages for dll and xml</li>
            <li>PlantUml</li>
            <li>Structuring content</li>
            <li>Integration Tests</li>
            <li>Fail Build On Lack of Coverage</li>
            <li>Package Artifacts</li>
            <li>Docker</li>
            <li>Nuget</li>
            <li>Package signing</li>
            <li>Reviewing packages</li>
            <li>Testing packages</li>
            <li>WIX</li>
            <li>Machine or PerUser install?</li>
            <li>Octopack</li>
            <li>Zip</li>
            <li>MSDeploy</li>
            <li>Out of date depedency analysis</li>
            <li>Dependency License Analysis</li>
            <li>Static Code Analysis</li>
            <li>Sonarqube</li>
            <li>Technical Debt Monitoring</li>
            <li>Sonarqube</li>
            <li>Jetbrains duplicate code scanner</li>
            <li>Benchmarking</li>
        </ul>

        <h2>Continous Integration</h2>
        * Choosing a build host
        AppVeyor
        Github Actions
        Azure Devops Pipelines
        * Upload coverage
        * Deploy documentation

        <h2>Continous Deployment</h2>
        * Libraries vs Applications
        * Choosing a deployment toolset
        * Managing risk

        <h2>Planning hosting</h2>
        * Planning decomission
        * Planning rollback \ rollforward fixing
        * Planning Staging \ Canary deployments
        * Planning High Availability \ Disaster Recover
        * Planning deployment

        <h2>Milestone deployments</h2>

    <h2>Deployment Verification</h2>
    <ul>
        <li>Entity Framework</li>
        <li>HTTP endpoint available per node</li>
        <li>Healthcheck API call</li>
        <li>Windows service installed + running</li>
    </ul>

    <h2>Dealing with consumers</h2>
    <ul>
        <li>Change requests</li>
        <li>Defining value</li>
    </ul>

        <h2>Branch strategy</h2>
        <p>TODO</p>

        <h3>Work Items and Pull Requests</h3>
        <h2>Defining exit criteria</h2>
        <p>TODO</p>

        <h2>Versioning</h2>
        <p>TODO</p>

        <h2>Fault Tracking and Performance Monitoring</h2>
        <h3>Defining performance</h3>
        <p>TODO</p>

        <h2>Releasing</h2>
        <p>TODO</p>
    </div>
<div class="col-md-4">
    @await Html.PartialAsync("_article_metadatasummary", articleMetadata)
</div>
</div>
