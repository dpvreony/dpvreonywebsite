@using DPVreony.Website.Features.Articles
@using NodaTime
@{
    var articleMetadata = new ArticleMetadataModel(
        ArticleStatus.Released,
        new Version(1, 2),
        new LocalDate(2021, 03, 27),
        new LocalDate(2021, 04, 18),
        new LocalDate(2021, 04, 18),
        new LocalDate(2022, 04, 18));
}

<div class="row">
    <div class="col-md-8">
        <h1>Using Mermaid diagrams with Statiq.</h1>
        <div class="alert alert-info">
            <strong>TLDR:</strong> The sample repository is available at: <a href="https://github.com/dpvreony/article-statiq-mermaid">https://github.com/dpvreony/article-statiq-mermaid</a>.
        </div>
        <h2>Introduction</h2>
        <p>Mermaid is a toolset for producing diagrams using markdown notation. Statiq is a .NET based static website generation toolset. This article details a way to integrate the pair to display diagrams inside a statically generated website.</p>
        <h2>Getting started</h2>
        <ol>
            <li>
                <p>Create a .NET Core 3.1 (or NET5) console app project and add Statiq as a dependency.</p>
                <div class="code">
                    <code>dotnet add package Statiq.Web</code>
                </div>
            </li>
            <li>
                <p>Update the Program Entry point to utilize Statiq.</p>
                <div class="code">
                <code><?# highlight csharp?>
using System.Threading.Tasks;
using Statiq.App;
using Statiq.Web;

namespace StatiqMermaid.Website
{
    public static class Program
    {
        public static async Task&lt;int&gt; Main(string[] args)
        {
           return await Bootstrapper
               .Factory
               .CreateWeb(args)
               .RunAsync();
        }
    }
}
<?#/ highlight?></code>
                </div>
            </li>
            <li>
                <p>Mermaid has a NodeJS Command Line Interface tool which can be installed as an development dependency. You will need a recent version of NodeJS installed then you can install the CLI:</p>
                <div class="code">
                    <code>npm install @@mermaid-js/mermaid-cli -D</code>
                </div>
            </li>
</ol>



<p>You're now ready to get running with Mermaid</p>

        <h2>Preparing a Mermaid Markdown file</h2>

        <div class="alert alert-info">
            This sample makes use of the flowchart example from the Mermaid website, where you can find more samples and instructions on the markdown notation.
        </div>

        <ol>
            <li>Create a folder structure in your console app project of <strong>"input\img\mermaid"</strong></li>
            <li>Add a text file to the mermaid folder with an .mmd file extension. For example flowchart.mmd</li>
            <li><p>Add the following markdown notation to the file:</p>
<div class="code">
<code>graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
</code>
</div></li>
        </ol>
        <h2>Transforming the Mermaid diagram to an image</h2>
        <div class="alert alert-info">
            You may want to consider changing your .gitignore to include the following lines:

            src/StatiqMermaid.Website/input/img/mermaid/*.svg<br>
            src/StatiqMermaid.Website/input/img/mermaid/*.png<br>
            src/StatiqMermaid.Website/output

        </div>

        <ol>
            <li>In the folder containing your solution create a batch file along the lines of build-mermaid.cmd</li>
            <li><p>Add the following commands:</p>
                <div class="code">
<code>
pushd StatiqMermaid.Website\input\img\mermaid
..\..\..\node_modules\.bin\mmdc -i flowchart.mmd -o flowchart.svg
popd
</code>
                </div>
</li>
        </ol>
        <h2>Building Statiq and Viewing the result</h2>
        <div class="alert alert-warning">
            The following script can sometimes error in Kestrel with the message "An attempt was made to access a socket in a way forbidden" if the port it is trying to use has been reserved by the operating system. Try changing the port number.
            For more detailed information check out https://ardalis.com/attempt-made-to-access-socket/
        </div>
        <ol>
            <li>In the folder containing your solution create a batch file along the lines of run-testserver.cmd</li>
            <li>
                <p>Add the following command:</p>
                <div class="code">
<code>
dotnet run --project StatiqMermaid.Website -- preview --port 30080
</code>
                </div>
            </li>
        </ol>
        <img src="basic-webpage-output.png" alt="Screenshot of a webpage containing a diagram generated from Mermaid notation" />
        <h2>Going further</h2>
        Now you have the basic flow you can consider:
        <ol>
            <li>Playing with more diagrams and different image output styles and file formats.</li>
            <li>Using a foreach loop in a batch file or powershell script to transfrom multiple markdown files.</li>
            <li>Using a shellexecute stage during your Statiq Console app build phase.</li>
            <li>Setting up a CI\CD flow to automate the build and deploy.</li>
        </ol>
        <h2>References</h2>
        <ul>
            <li><a id="#1"></a>Github mermaid-cli https://github.com/mermaid-js/mermaid-cli</li>
            <li><a id="#2"></a>Mermaid Flowchart Sameple https://mermaid-js.github.io/mermaid/#/flowchart?id=flowcharts-basic-syntax</li>
            <li><a id="#3"></a>MARTIN BJÖRKSTRÖM: I ported my blog to Statiq https://martinbjorkstrom.com/posts/2020-04-20-i-ported-my-blog-to-statiq
        </ul>
    </div>
    <div class="col-md-4">
        @await Html.PartialAsync("_article_metadatasummary", articleMetadata)
    </div>
</div>

